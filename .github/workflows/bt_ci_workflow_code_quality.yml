name: "CI Workflow Code Quality"
on: 
  workflow_call:
    inputs:
      code_quality_check_command: 
        required: true
        type: string
jobs:

  linters:
    name: Code Quality checks
    runs-on: ubuntu-20.04
    env:
      PYTHONUNBUFFERED: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACTIONS_READ_TOKEN }}
          path: main
      - name: Decide Python Version
        run: |
          cd main
          if grep -q "debian_codename" .braintec/deploy.yaml; then
            if grep "debian_codename" .braintec/deploy.yaml | grep -q "stretch"; then
              echo "PY_VERSION=3.5" >> $GITHUB_ENV
              echo "The Python version to be used is 3.5"
            elif grep "debian_codename" .braintec/deploy.yaml | grep -q "buster"; then
              echo "PY_VERSION=3.7" >> $GITHUB_ENV
              echo "The Python version to be used is 3.7"
            elif grep "debian_codename" .braintec/deploy.yaml | grep -q "bullseye"; then
              echo "PY_VERSION=3.9" >> $GITHUB_ENV
              echo "The Python version to be used is 3.9"
            fi;
          else
           echo "PY_VERSION=3.6" >> $GITHUB_ENV
           echo "ERROR - Missing debian_codename in the deploy.yaml. Please add it. The default Python version to use will be 3.6"
          fi;
      - name: Checkout BT-CLI
        uses: actions/checkout@v2
        with:
          ref: master
          token: ${{ secrets.ACTIONS_READ_TOKEN }}
          repository: brain-tec/bt-docker.git
          path: 'bt-docker'      
      - name: Install BT-CLI
        run: 'pip install -I ./bt-docker'
      - name: Login to Registry
        run: 'echo "${{ secrets.BT_REGISTRY_PASSWORD }}" | docker login registry.braintec-group.com -u "${{ secrets.BT_REGISTRY_USERNAME }}" --password-stdin'
      - name: Getting Pylint
        run: 'docker pull registry.braintec-group.com/bt-pylint:${{ env.PY_VERSION }}'
      - name: Check BT CLI installation
        run: 'bt --version'
      - name: Run Code Quality checks
        run: |
          cd main
          ${{ inputs.code_quality_check_command }} --py-version ${{ env.PY_VERSION }}
  
